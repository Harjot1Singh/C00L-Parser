program          ->  class' ; programs

programs         ->  program | EPSILON

class'           ->  class TYPE classDef

classDef         ->  bracketFeature | inherits TYPE bracketFeature

bracketFeature   ->  { bracketFeatureM }

bracketFeatureM  ->  classFeature | EPSILON

classFeature     ->  feature ; classFeatures

classFeatures    ->  classFeature | EPSILON

feature          ->  ID featureDetails

featureDetails   ->  ( optionalFeatures ) : TYPE { expr } | : TYPE optExpr

optionalFeatures ->  featureFormal | EPSILON

optExpr          ->  <- expr | EPSILON

featureFormal    ->  formal featureFormals

featureFormals   ->  , featureFormal | EPSILON

formal           ->  ID : TYPE

expr             ->  if expr then expr else expr fi expr' | while expr loop expr pool expr' | { exprSemiColon } expr' | let IDTypeExpr in expr expr' | case expr of IDTypeArrow esac expr' | new TYPE expr' | ( expr ) expr' | assignTerm expr'

expr'            ->  @ TYPE . ID ( optExprComma ) expr' | . ID ( optExprComma ) expr' | EPSILON

IDTypeArrow      ->  formal => expr ; IDTypeArrows

IDTypeArrows     ->  IDTypeArrow | EPSILON

IDTypeExpr       ->  formal optExpr IDTypeExprs

IDTypeExprs      ->  , IDTypeExpr | EPSILON

optExprComa      ->  exprComma | EPSILON

exprComma        ->  expr exprCommas

exprCommas       ->  , exprComma | EPSILON

exprSemiColon    ->  expr ; exprSemiColons

exprSemiColons   ->  exprSemiColon | EPSILON

assignTerm       ->  ID <-  notTerm | notTerm

notTerm          ->  not compareTerm | compareTerm

compareTerm      ->  addTerm compareTerm'

compareTerm'     ->  <= addTerm compareTerm' | < addTerm compareTerm' | = addTerm compareTerm' | EPSILON

addTerm          ->  multiTerm addTerm'

addTerm'         ->  + multiTerm addTerm' | - multiTerm addTerm' | EPSILON

multiTerm        ->  isvoidTerm multiTerm'

multiTerm'       ->  * isvoidTerm multiTerm' | / isvoidTerm multiTerm' | EPSILON

isvoidTerm       ->  isvoid tildeTerm | tildeTerm

tildeTerm        ->  ~ factor | factor

factor           ->  ID IDFactor | integer | string | true | false

IDFactor         -> ( optExprComma ) expr' | EPSILON
program         ::= class; programs

programs        ::= program
                | ϵ

class           ::= class TYPE classDef

classDef        ::= bracketFeature
                | inherits TYPE bracketFeature

bracketFeature  ::= { bracketFeatureM }

bracketFeatureM ::= classFeature
                | ϵ

classFeature    ::= feature; classFeatures

classFeatures   ::= classFeature
                | ϵ

feature         ::= ID featureDetails

featureDetails  ::= ( optionalFeatures ) : TYPE { expr }
                | : TYPE optExpr

optionalFeatures::= featureFormal
                | ϵ

optExpr         ::= <- expr
                | ϵ

featureFormal   ::= formal featureFormals

featureFormals  ::= , featureFormal
                | ϵ

formal          ::= ID : TYPE

expr            ::= ID( optExprComma ) expr'
                | if expr then expr else expr fi expr'
                | while expr loop expr pool expr'
                | { exprSemiColon } expr'
                | let IDTypeExpr in expr expr'
                | case expr of IDTypeArrow esac expr'
                | new TYPE expr'
                | (expr) expr'
                | assignTerm expr'

expr'           ::= @TYPE.ID( optExprComma ) expr'
                | .ID( optExprComma ) expr'
                | ϵ

IDTypeArrow     ::= formal => expr; IDTypeArrows

IDTypeArrows    ::= IDTypeArrow
                | ϵ

IDTypeExpr      ::= formal optExpr IDTypeExprs

IDTypeExprs     ::= , IDTypeExpr
                | ϵ

optExprComa     ::= exprComma
                | ϵ

exprComma       ::= expr exprCommas

exprCommas      ::= , exprComma
                | ϵ

exprSemiColon   ::= expr; exprSemiColons

exprSemiColons  ::= exprSemiColon
                | ϵ

assignTerm      ::= ID <-  notTerm
                | notTerm

notTerm         ::= not compareTerm
                | compareTerm

compareTerm     ::= addTerm compareTerm'

compareTerm'    ::= <= addTerm compareTerm'
                | < addTerm compareTerm'
                | = addTerm compareTerm'
                | ϵ

addTerm         ::= multiTerm addTerm'

addTerm'        ::= + multiTerm addTerm'
                | - multiTerm addTerm'
                | ϵ

multiTerm       ::= isvoidTerm multiTerm'

multiTerm'      ::= * isvoidTerm multiTerm'
                | / isvoidTerm multiTerm'
                | ϵ

isvoidTerm      ::= isvoid tildeTerm
                | tildeTerm

tildeTerm       ::= ~factor
                | factor

factor          ::= ID
                | integer
                | string
                | true
                | false